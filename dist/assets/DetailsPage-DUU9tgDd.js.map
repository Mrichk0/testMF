{"version":3,"file":"DetailsPage-DUU9tgDd.js","sources":["../../src/components/Grid/Tile/Tile.tsx","../../src/components/Grid/Grid.tsx","../../src/pages/DetailsPage/DetailsPage.tsx"],"sourcesContent":["import React from \"react\";\nimport styles from \"./Tile.module.css\";\n\ninterface TileProps {\n  data: {\n    id: string;\n    type: \"text\" | \"image\" | \"video\";\n    content: string;\n  };\n}\n\nconst API_URL = import.meta.env.VITE_API_URL || \"http://0.0.0.0:8055\";\n\nconst Tile: React.FC<TileProps> = ({ data }) => {\n  const renderContent = () => {\n    switch (data.type) {\n      case \"image\":\n        return (\n          <img\n            src={`${API_URL}/assets/${data.content}`}\n            alt=\"\"\n            className={styles.tileImage}\n          />\n        );\n      case \"video\":\n        const isYouTube = data.content.includes(\"youtube.com/watch\");\n        const embedUrl = isYouTube\n          ? data.content.replace(\"watch?v=\", \"embed/\")\n          : data.content;\n        return (\n          <div className={styles.videoWrapper}>\n            <iframe\n              src={embedUrl}\n              title=\"video\"\n              frameBorder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n              allowFullScreen\n            ></iframe>\n          </div>\n        );\n      case \"text\":\n      default:\n        return <p className={styles.tileText}>{data.content}</p>;\n    }\n  };\n\n  return (\n    <div className={`${styles.tile} ${styles[`tile-${data.type}`]}`}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default Tile;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"./Grid.module.css\";\nimport Tile from \"./Tile/Tile\";\n\ninterface TileData {\n  id: string;\n  type: \"text\" | \"image\" | \"video\";\n  content: string;\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n}\n\ninterface GridProps {\n  tiles: TileData[];\n}\n\nconst Grid: React.FC<GridProps> = ({ tiles }) => {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [rowHeight, setRowHeight] = useState<number>(0);\n\n  useEffect(() => {\n    const updateRowHeight = () => {\n      if (gridRef.current) {\n        const gridWidth = gridRef.current.offsetWidth - 40;\n        const maxX = Math.max(...tiles.map((tile) => tile.x2));\n        const cellWidth = (gridWidth - (maxX - 1) * 10) / maxX;\n        setRowHeight(cellWidth * 0.75);\n      }\n    };\n\n    updateRowHeight();\n    window.addEventListener(\"resize\", updateRowHeight);\n    return () => window.removeEventListener(\"resize\", updateRowHeight);\n  }, [tiles]);\n\n  const maxX = Math.max(...tiles.map((tile) => tile.x2));\n\n  const gridStyle = {\n    display: \"grid\",\n    gridTemplateColumns: `repeat(${maxX}, 1fr)`,\n    gridAutoRows: `${rowHeight}px`,\n    gap: \"10px\",\n    padding: \"20px\",\n  };\n\n  return (\n    <div ref={gridRef} className={styles.gridContainer} style={gridStyle}>\n      {tiles.map((tile) => {\n        const tileStyle = {\n          gridColumn: `${tile.x1 + 1} / ${tile.x2 + 1}`,\n          gridRow: `${tile.y1 + 1} / span ${tile.y2 - tile.y1}`,\n          height: `${rowHeight * (tile.y2 - tile.y1)}px`,\n        };\n\n        return (\n          <div key={tile.id} style={tileStyle} className={styles.tileWrapper}>\n            <Tile data={tile} />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Grid;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport useAllContentDetails, { Template } from \"../../hooks/useAllContentPage\";\n\nimport Grid from \"../../components/Grid/Grid\";\nimport styles from \"./DetailsPage.module.css\";\n\ninterface DetailsPageProps {\n  slug: string | undefined;\n  categorySlug?: string | undefined;\n}\n\nconst DetailsPage: React.FC<DetailsPageProps> = ({ slug: propSlug }) => {\n  const { slug: paramSlug } = useParams<{ slug: string }>();\n  const slug = propSlug || paramSlug;\n\n  const { data, isLoading, error } = useAllContentDetails(slug);\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n  if (!data) return <div>No data available</div>;\n\n  const tiles =\n    data?.template?.map((tile: Template) => {\n      const getContent = (tile: Template) => {\n        switch (tile.type) {\n          case \"text\":\n            return tile.translations?.[0]?.text || \"\";\n          case \"image\":\n            return tile.image || \"\";\n          case \"video\":\n            return tile.video_url || \"\";\n          default:\n            return \"\";\n        }\n      };\n\n      return {\n        id: tile.id,\n        type: tile.type as \"text\" | \"image\" | \"video\",\n        content: getContent(tile),\n        x1: tile.x1,\n        y1: tile.y1,\n        x2: tile.x2,\n        y2: tile.y2,\n      };\n    }) || [];\n\n  return (\n    <div className={styles.detailsPage}>\n      <h1>{data.translations[0]?.title}</h1>\n      {tiles.length > 0 && <Grid tiles={tiles} />}\n    </div>\n  );\n};\n\nexport default DetailsPage;\n"],"names":["API_URL","Tile","data","renderContent","jsx","styles","embedUrl","Grid","tiles","gridRef","useRef","rowHeight","setRowHeight","useState","useEffect","updateRowHeight","gridWidth","maxX","tile","cellWidth","gridStyle","tileStyle","DetailsPage","propSlug","paramSlug","useParams","slug","isLoading","error","useAllContentDetails","jsxs","_a","getContent","_b"],"mappings":"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"}